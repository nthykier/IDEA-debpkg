fields:
  - canonicalName: Package
    onlyInParagraphType: "Package"
    description: |
      <p>Declares the name of a binary package</p>
    valueType: SINGLE_TRIVIAL_VALUE
    valueValidation: /^[a-z0-9][a-z0-9.+-]+$/
    supportsSubstvars: false

  - canonicalName: Source
    onlyInParagraphType: "Source"
    description: |
      <p>Declares the name of the source package</p>
    valueType: SINGLE_TRIVIAL_VALUE
    # Only valid for DebianControl; in other variants, it may have an optional version number appended
    # Ã  la "foo (1.0-1)"
    valueValidation: /^[a-z0-9][a-z0-9.+-]+$/
    supportsSubstvars: false

  - canonicalName: Package-Type
    description: |
      <p><b>Special-purpose only</b>.  <em>This field is a special purpose field and is rarely needed. You are recommended to omit unless you know you need it.</em></p>

      <p>Determines the type of package.  This field can be used to declare that a given package is a different type of package than usual.  The primary case
         where this is known to be useful is for building micro-debs ("udeb") to be consumed by the debian-installer.</p>
    valueType: SINGLE_KEYWORD
    warnIfDefault: true
    onlyInParagraphType: "Package"
    supportsSubstvars: false
    defaultValue: "deb"
    # aliases: ["X-Package-Type", "XC-Package-Type"]
    keywordList:
      - value: "deb"
        description: |
          <p>The package will be built as a regular deb.</p>
      - value: "udeb"
        description: |
          <p>The package will be built as a micro-deb (also known as a udeb).  These are solely used by the debian-installer.</p>

  - canonicalName: Essential
    valueType: SINGLE_KEYWORD
    onlyInParagraphType: "Package"
    supportsSubstvars: true
    description: |
      <p><b>Special-purpose only</b>.  <em>This field is a special purpose field and is rarely needed. You are recommended to omit unless you know you need it.</em></p>

      <p>Whether packages the package should be considered Essential as defined by Debian Policy.</p>

      <p>Essential packages are subject to several distinct but very important rules:
      <ul>
        <li>Essential packages are considered essential for the system to work.  The packaging system (APT and dpkg) will refuse to uninstall it without some very insisting force options and warnings.</li>
        <li>Other packages are not required to declare explicit dependencies on essential packages as a side-effect of the above except as to ensure a certain version of the essential package is installed first.</li>
        <li>Once installed, essential packages function must at all time no matter where dpkg is in its installation or upgrade process.</li>
      </ul>
      </p>
    warnIfDefault: true
    defaultValue: "no"
    keywordList:
      - value: "yes"
        description: |
          <p>The package is essential and uninstalling it will completely and utterly break the system beyond repair.</p>
      - value: "no"
        description: |
          <p>The package is a regular package.  This is the default and recommended.</p>

          <p>Note that declaring a package to be "Essential: no" is the same as not having the field except omitting
          the field wastes fewer bytes on everyone's hard disk.</p>

  - canonicalName: XB-Important
    valueType: SINGLE_KEYWORD
    onlyInParagraphType: "Package"
    description: |
      <p><b>Special-purpose only</b>.  <em>This field is a special purpose field and is rarely needed. You are recommended to omit unless you know you need it.</em></p>

      <p><b>Deprecated</b>. <em>You almost certainly want <em>Protected</em> instead of (or in addition to) this field.</b></p>

      <p>The field works similar to <b>Protected</b> except that dpkg does not support the field.  On the plus side, it is supported in older releases (e.g. Debian buster and earlier) and can be useful for backwards compatibility with these releases.</p>
    warnIfDefault: true
    defaultValue: "no"
    supportsSubstvars: true
    keywordList:
      - value: "yes"
        description: |
          <p>The package is protected and attempts to uninstall it will cause strong warnings to the user that they might be breaking the system.</p>
      - value: "no"
        description: |
          <p>The package is a regular package.  This is the default and recommended.</p>

          <p>Note that declaring a package to be "XB-Important: no" is the same as not having the field except omitting
          the field wastes fewer bytes on everyone's hard-disk.</p>

  - canonicalName: Protected
    valueType: SINGLE_KEYWORD
    onlyInParagraphType: "Package"
    description: |
      <p><b>Special-purpose only</b>.  <em>This field is a special purpose field and is rarely needed. You are recommended to omit unless you know you need it.</em></p>

      <p>Whether packages the package should be considered Protected by dpkg and APT.</p>

      <p>If a package is protested, then both dpkg and APT will provide very strong warnings to the user when they attempt to uninstall the package.</p>

      <p>This field is useful for the small subset of packages that are not essential but if installed tends to be very important for the system to function.  Examples include this is useful for packages such as init systems and boot loaders, where uninstalling it might break the system.  On the other hand, you can have "systems" (e.g. containers or chroots) that do not need a boot loader nor an init system, so they are not <em>Essential</em>.</p>
    warnIfDefault: true
    supportsSubstvars: true
    defaultValue: "no"
    keywordList:
      - value: "yes"
        description: |
          <p>The package is protected and attempts to uninstall it will cause strong warnings to the user that they might be breaking the system.</p>
      - value: "no"
        description: |
          <p>The package is a regular package.  This is the default and recommended.</p>

          <p>Note that declaring a package to be "Protected: no" is the same as not having the field except omitting
          the field wastes fewer bytes on everyone's hard-disk.</p>

  - canonicalName: Standards-Version
    onlyInParagraphType: "Source"
    description: |
      <p>Declares the last semantic version of the Debian Policy this package as last checked against.</p>

      <em>Example</em>:
      <pre>Standards-Version: 4.5.2</pre>

      <p>Note that the last version part (the <em>.X</em> in 4.5.2<em>.X</em>) is typically omitted as it
      is used solely for editorial changes to the policy (e.g. typo fixes).</p>
    valueType: SINGLE_TRIVIAL_VALUE
    valueValidation: /^\d+[.]\d+[.]\d+(?:[.]\d+)$/
    supportsSubstvars: false

  - canonicalName: Maintainer
    onlyInParagraphType: "Source"
    description: |
      <p>The maintainer of the package.</p>

      <em>Example</em>:
      <pre>Maintainer: Jane Contributor &lt;jane@janes.email-provider.org&gt;</pre>

      <p>Note: If a person is listed in the Maintainer field, they should <em>not</em> be listed in Uploader field.</p>
    # Technically wrong, but using SINGLE_TRIVIAL_VALUE trips another validation rule for a valid maintainer field
    valueType: FREE_TEXT_VALUE
    supportsSubstvars: false

  - canonicalName: Vcs-Browser
    onlyInParagraphType: "Source"
    description: |
      <p>URL to the Version control system repo used for the packaging. The URL should be usable with a browser without requiring any login.</p>

      <p>This should be used together with one of the other <b>Vcs-*</b> fields.</p>
    # Technically wrong, but existing validation rules are not sufficient.
    valueType: FREE_TEXT_VALUE
    supportsSubstvars: false

  - canonicalName: Vcs-Git
    onlyInParagraphType: "Source"
    description: |
      <p>URL to the git repo used for the packaging. The URL should be usable with "git clone" without requiring any login.</p>

      <p>This should be used together with the <b>Vcs-Browser</b> field provided there is a web UI for the repo.</p>
    # Technically wrong, but existing validation rules are not sufficient.
    valueType: FREE_TEXT_VALUE
    supportsSubstvars: false

  - canonicalName: Vcs-Svn
    onlyInParagraphType: "Source"
    description: |
      <p>URL to the Subversion (SVN) repo used for the packaging. The URL should be usable with "svn checkout" without requiring any login.</p>

      <p>This should be used together with the <b>Vcs-Browser</b> field provided there is a web UI for the repo.</p>
    # Technically wrong, but existing validation rules are not sufficient.
    valueType: FREE_TEXT_VALUE
    supportsSubstvars: false

  - canonicalName: Vcs-Arch
    onlyInParagraphType: "Source"
    description: |
      <p>URL to the Arch VCS repo used for the packaging. The URL should be usable for getting a copy of the sources without requiring any login.</p>

      <p>This should be used together with the <b>Vcs-Browser</b> field provided there is a web UI for the repo.</p>
    # Technically wrong, but existing validation rules are not sufficient.
    valueType: FREE_TEXT_VALUE
    supportsSubstvars: false

  - canonicalName: Vcs-Bzr
    onlyInParagraphType: "Source"
    description: |
      <p>URL to the Bzr VCS repo used for the packaging. The URL should be usable for getting a copy of the sources without requiring any login.</p>

      <p>This should be used together with the <b>Vcs-Browser</b> field provided there is a web UI for the repo.</p>
    # Technically wrong, but existing validation rules are not sufficient.
    valueType: FREE_TEXT_VALUE
    supportsSubstvars: false

  - canonicalName: Vcs-Cvs
    onlyInParagraphType: "Source"
    description: |
      <p>URL to the CVS VCS repo used for the packaging. The URL should be usable for getting a copy of the sources without requiring any login.</p>

      <p>This should be used together with the <b>Vcs-Browser</b> field provided there is a web UI for the repo.</p>
    # Technically wrong, but existing validation rules are not sufficient.
    valueType: FREE_TEXT_VALUE
    supportsSubstvars: false

  - canonicalName: Vcs-Darcs
    onlyInParagraphType: "Source"
    description: |
      <p>URL to the Darcs VCS repo used for the packaging. The URL should be usable for getting a copy of the sources without requiring any login.</p>

      <p>This should be used together with the <b>Vcs-Browser</b> field provided there is a web UI for the repo.</p>
    # Technically wrong, but existing validation rules are not sufficient.
    valueType: FREE_TEXT_VALUE
    supportsSubstvars: false

  - canonicalName: Vcs-Hg
    onlyInParagraphType: "Source"
    description: |
      <p>URL to the Mercurial (hg) VCS repo used for the packaging. The URL should be usable for getting a copy of the sources without requiring any login.</p>

      <p>This should be used together with the <b>Vcs-Browser</b> field provided there is a web UI for the repo.</p>
    # Technically wrong, but existing validation rules are not sufficient.
    valueType: FREE_TEXT_VALUE
    supportsSubstvars: false

  - canonicalName: Vcs-Mtn
    onlyInParagraphType: "Source"
    description: |
      <p>URL to the Monotone (Mtn) VCS repo used for the packaging. The URL should be usable for getting a copy of the sources without requiring any login.</p>

      <p>This should be used together with the <b>Vcs-Browser</b> field provided there is a web UI for the repo.</p>
    # Technically wrong, but existing validation rules are not sufficient.
    valueType: FREE_TEXT_VALUE
    supportsSubstvars: false

  - canonicalName: "DM-Upload-Allowed"
    valueType: SINGLE_KEYWORD
    onlyInParagraphType: "Source"
    description: |
      <p><b>Obsolete</b>.  <em>This field is obsolete and can be removed.</em></p>

      <p>This field was an implementation detail of how Debian Maintainer permissions in Debian originally worked but the implementation has since changed.</p>

      <p>Note that "Debian Maintainer" is a form of privilege inside Debian to denote that a person has limited permissions to do unsupervised uploads of packages.
         Not to be confused by "maintainer (of the package)", which is used to denote who is responsible for maintaining the package.
      </p>
      <p>For more details about the Debian Maintainer concept and how the field was used, please see
         <a href="https://www.debian.org/vote/2007/vote_003">General Resolution: Endorse the concept of Debian Maintainers</a></p>
    warnIfDefault: true
    supportsSubstvars: false
    keywordList:
      - value: "yes"
        description: |
          <p>When this field was used, this value indicated that the package could be uploaded by a Debian Maintainer.</p>

  - canonicalName: "Build-Depends"
    onlyInParagraphType: "Source"
    description: |
      <p>The build-dependency for this source package.  Needed for any target including <b>clean</b>.</p>
    valueType: COMMA_SEPARATED_VALUE_LIST_TRAILING_COMMA_OK
    valueLanguage: DEPENDENCY_LANGUAGE_SOURCE_DEPENDENCY
    supportsSubstvars: false
    supportsBuildProfileRestriction: true

  - canonicalName: "Build-Depends-Arch"
    onlyInParagraphType: "Source"
    description: |
      <p>The build-dependency for this source package but only when running <b>build-arch</b> and <b>binary-arch</b> targets.</p>

      <p>This occurs when building with <pre>dpkg-buildpackage -B</pre>.</p>

      <p>Note that these dependencies are <em>not</em> available during <b>clean</b>.</p>
    valueType: COMMA_SEPARATED_VALUE_LIST_TRAILING_COMMA_OK
    valueLanguage: DEPENDENCY_LANGUAGE_SOURCE_DEPENDENCY
    supportsSubstvars: false
    supportsBuildProfileRestriction: true

  - canonicalName: "Build-Depends-Indep"
    onlyInParagraphType: "Source"
    description: |
      <p>The build-dependency for this source package but only when running <b>build-indep</b> and <b>binary-indep</b> targets.</p>

      <p>This occurs when building with <pre>dpkg-buildpackage -A</pre>.</p>

      <p>Note that these dependencies are <em>not</em> available during <b>clean</b>.</p>
    valueType: COMMA_SEPARATED_VALUE_LIST_TRAILING_COMMA_OK
    valueLanguage: DEPENDENCY_LANGUAGE_SOURCE_DEPENDENCY
    supportsSubstvars: false
    supportsBuildProfileRestriction: true

  - canonicalName: "Build-Conflicts"
    onlyInParagraphType: "Source"
    description: |
      <p>Packages that must not be installed during the build.  This applies to any target including <b>clean</b>.</p>

      <p>Where possible, it is often better to configure the build so that it does not react to the package being
      present in the first place.  Usually this is a question of using a <b>--without-foo</b> or <b>--disable-foo</b>
      or such to the build configuration.</p>
    valueType: COMMA_SEPARATED_VALUE_LIST_TRAILING_COMMA_OK
    valueLanguage: DEPENDENCY_LANGUAGE_SOURCE_NEGATIVE_DEPENDENCY
    supportsSubstvars: false
    supportsBuildProfileRestriction: true

  - canonicalName: "Build-Conflicts-Arch"
    onlyInParagraphType: "Source"
    description: |
      <p>Packages that must not be installed when running <b>build-arch</b> and <b>binary-arch</b> targets.</p>

      <p>Where possible, it is often better to configure the build so that it does not react to the package being
      present in the first place.  Usually this is a question of using a <b>--without-foo</b> or <b>--disable-foo</b>
      or such to the build configuration.</p>
    valueType: COMMA_SEPARATED_VALUE_LIST_TRAILING_COMMA_OK
    valueLanguage: DEPENDENCY_LANGUAGE_SOURCE_NEGATIVE_DEPENDENCY
    supportsSubstvars: false
    supportsBuildProfileRestriction: true

  - canonicalName: "Build-Conflicts-Indep"
    onlyInParagraphType: "Source"
    description: |
      <p>Packages that must not be installed when running <b>build-indep</b> and <b>binary-indep</b> targets.</p>

      <p>Where possible, it is often better to configure the build so that it does not react to the package being
      present in the first place.  Usually this is a question of using a <b>--without-foo</b> or <b>--disable-foo</b>
      or such to the build configuration.</p>
    valueType: COMMA_SEPARATED_VALUE_LIST_TRAILING_COMMA_OK
    valueLanguage: DEPENDENCY_LANGUAGE_SOURCE_NEGATIVE_DEPENDENCY
    supportsSubstvars: false
    supportsBuildProfileRestriction: true

  - canonicalName: "Pre-Depends"
    onlyInParagraphType: "Package"
    description: |
      <p><b>Advanced field</b>.  <em>This field is covers an advanced topic.  If you are new to packaging, you are
      probably not looking for this field (except to set a <b>${misc:Pre-Depends}</b> relation.  Incorrect use
      of this field can cause issues - among other causing issues during upgrades that users cannot work around
      without passing --force-* options to dpkg.
      </em></p>

      <p>This field is like <b>Depends</b>, except that is also forces dpkg to complete installation of the packages
      named before even starting the installation of the package which declares the pre-dependency.</p>

      <em>Example:</em>
      <pre>Pre-Depends: ${misc:Pre-Depends}</pre>

      <p>Note this is a very strong dependency and not all packages support being a pre-dependency because it puts
      additional requirements on the package being depended on.  Use of <b>${misc:Pre-Depends}</b> is pre-approved
      and recommended.</p>
    valueType: COMMA_SEPARATED_VALUE_LIST_TRAILING_COMMA_OK
    valueLanguage: DEPENDENCY_LANGUAGE_BINARY_DEPENDENCY
    supportsSubstvars: true

  - canonicalName: "Depends"
    onlyInParagraphType: "Package"
    description: |
      <p>Lists the packages that must be installed (<em>configured</em>) and before this package is installed
      (<em>configured</em>).</p>

      <em>Example:</em>
      <pre>Package: foo
      Architecture: any
      Depends: ${misc:Depends},
               ${shlibs:Depends},
               libfoo1 (= ${binary:Version}),
               foo-data (= ${source:Version}),
      </pre>

      <p>This field declares an absolute dependency.  A package will not be configured unless all of the packages
      listed in its <b>Depends</b> field have been correctly configured (unless there is a circular dependency)./<p>

      <p>This field should be used if the depended-on package is required for the depending package to provide a
      <em>significant amount of functionality</em> or when it is used in the <b>postinst</b> or <b>prerm</b>
      scripts.</p>
    valueType: COMMA_SEPARATED_VALUE_LIST_TRAILING_COMMA_OK
    valueLanguage: DEPENDENCY_LANGUAGE_BINARY_DEPENDENCY
    supportsSubstvars: true

  - canonicalName: "Recommends"
    onlyInParagraphType: "Package"
    description: |
      <p>Lists the packages that <em>should</em> be installed when this package is installed in all but <em>unusual
      installations</em>.</p>

      <em>Example:</em>
      <pre>Recommends: foo-optional</pre>

      <p>By default, APT will attempt to install recommends unless they cannot be installed or the user has configured
      APT skip recommends.</p>
    valueType: COMMA_SEPARATED_VALUE_LIST_TRAILING_COMMA_OK
    valueLanguage: DEPENDENCY_LANGUAGE_BINARY_DEPENDENCY
    supportsSubstvars: true

  - canonicalName: "Suggests"
    onlyInParagraphType: "Package"
    description: |
      <p>Lists the packages that may make this package more useful but not installing them is perfectly reasonable as
      well.  Suggests can also be useful for add-ons that only make sense in particular corner cases like supporting
      a non-standard file format.</p>

      <em>Example:</em>
      <pre>Suggests: bar</pre>
    valueType: COMMA_SEPARATED_VALUE_LIST_TRAILING_COMMA_OK
    valueLanguage: DEPENDENCY_LANGUAGE_BINARY_DEPENDENCY
    supportsSubstvars: true

  - canonicalName: "Enhances"
    onlyInParagraphType: "Package"
    description: |
      <p>This field is similar to Suggests but works in the opposite direction.  It is used to declare that a package
      can enhance the functionality of the package.</p>

      <em>Example:</em>
      <pre>Enhances: bar</pre>
    valueType: COMMA_SEPARATED_VALUE_LIST_TRAILING_COMMA_OK
    valueLanguage: DEPENDENCY_LANGUAGE_BINARY_DEPENDENCY
    supportsSubstvars: true

  - canonicalName: "Provides"
    onlyInParagraphType: "Package"
    description: |
      <p>Declare this package also provide one or more other packages.  This means that this package can substitute
      for the provided package in some relations.</p>

      <em>Example:</em>
      <pre>Package: foo
      ...

      Package: foo-plus
      Provides: foo (= ${source:Upstream-Version})
      </pre>


      <p>If the provides relation is versioned, it must use a "strictly equals" version.  If it does not declare
      a version, then it <em>cannot</em> be used to satisfy a dependency with a version restriction.  Consider
      the following example:</p>

      <em>Archive scenario:</em>  (This is <em>not</em> a valid debian/control file, despite the resemblance)
      <pre>
      Package foo
      Depends: bar (&gt;= 1.0)

      Package: bar
      Version: 0.9

      Package: bar-plus
      Provides: bar (= 1.0)

      Package: bar-clone
      Provides: bar
      </pre>

      <p>In this archive scenario, the <b>bar-plus</b> package will satisfy the dependency of <b>foo</b> as the only one.
      The <b>bar</b> package fails because the version is only <em>0.9</em> and <b>bar-clone</b> because the provides
      is unversioned but the dependency clause is versioned.</p>
    valueType: COMMA_SEPARATED_VALUE_LIST_TRAILING_COMMA_OK
    valueLanguage: DEPENDENCY_LANGUAGE_BINARY_NEGATIVE_DEPENDENCY
    supportsSubstvars: true
    supportedVersionOperators: "="

  - canonicalName: "Conflicts"
    onlyInParagraphType: "Package"
    description: |
      <p><b>Confusion warning</b> <em>You may be looking for Breaks instead of Conflicts</em>.</p>

      <p>This package cannot be installed together with the packages listed in the Conflicts field.  This
      is a "bigger hammer" than <b>Breaks</b> and is used sparingly.  Notably, if you want to do a versioned
      <b>Conflicts</b> then you <em>almost certainly</em> want <b>Breaks</b> instead.</p>

      <em>Example:</em>
      <pre>Conflicts: bar</pre>

      <p>Please check the description of the <b>Breaks</b> field for when you would use <b>Breaks</b> vs. <b>Conflicts</b>.</p>

      <p>Note if a package conflicts with itself (indirectly or via <b>Provides</b>), then it is using a special rule
      for Conflicts.  See section 7.6.2 "Replacing whole packages, forcing their removal" in the Debian Policy Manual.</p>
    valueType: COMMA_SEPARATED_VALUE_LIST_TRAILING_COMMA_OK
    valueLanguage: DEPENDENCY_LANGUAGE_BINARY_NEGATIVE_DEPENDENCY
    supportsSubstvars: true

  - canonicalName: "Breaks"
    onlyInParagraphType: "Package"
    description: |
      <p>This package cannot be installed together with the packages listed in the Breaks field.</p>

      <p>This is often use to declare versioned issues such as "This package does not work with foo if it is version 1.0 or less".
      In comparison, <b>Conflicts</b> is generally used to declare that "This package does not work at all as long as foo is installed".</p>

      <em>Example:</em>
      <pre>Breaks: bar (<= 1.0~)</pre>

      <em>Breaks vs. Conflicts:</em>
      <table>
        <tr><th>Case</th><th>What to do</th></tr>
        <tr><td>I moved files from <b>foo</b> to <b>bar</b> in version X</td><td>Add <b>Breaks: foo (&lt;&lt; X~)</b> + <b>Replaces: foo (&lt;&lt; X~)</b> to <b>bar</b></td></tr>
        <tr><td>Upgrading bar while <b>foo</b> is version X or less causes problems <b>foo</b> or <b>bar</b> to break</td><td>Add <b>Breaks: foo (&lt;&lt; X~)</b> to <b>bar</b></td></tr>
        <tr><td>The <b>foo</b> and <b>bar</b> packages provide the same functionality (interface) but different implementations and there can be at most one of them.</td></td>See section 7.6.2 "Replacing whole packages, forcing their removal" in the Debian Policy Manual.</td></tr>
        <tr><td>The <b>foo</b> and <b>bar</b> packages are unrelated but happen to provide the same binary.</td><td>Attempt to resolve the name conflict by renaming either (or both) sides.</td>/<tr>
      </table>

      <p>Note the use of <em>~</em> in version numbers are generally used to ensure this works correctly in case of a backports (in the Debian archive), where the package is rebuilt with the "~bpo" suffix in its version.</p>
    valueType: COMMA_SEPARATED_VALUE_LIST_TRAILING_COMMA_OK
    valueLanguage: DEPENDENCY_LANGUAGE_BINARY_NEGATIVE_DEPENDENCY
    supportsSubstvars: true

  - canonicalName: "Replaces"
    onlyInParagraphType: "Package"
    description: |
      <p>This package either replaces another package or overwrites files that used to be provided by another package.</p>

      <p><em>Attention: The <b>Replaces</b> field is <b>always</b> used with either <b>Breaks</b> or <b>Conflicts</b></em>.</p>

      <em>Example:</em>
      <pre>
      Package: foo
      ...

      # The foo package was split to move data files into foo-data in version 1.2-3
      Package: foo-data
      Replaces: foo (<< 1.2-3~)
      Breaks: foo (<< 1.2-3~)
      </pre>

      <p>Please check the description of the <b>Breaks</b> field for when you would use <b>Breaks</b> vs. <b>Conflicts</b>.  It also covers common uses of <b>Replaces</b>.</p>
    valueType: COMMA_SEPARATED_VALUE_LIST_TRAILING_COMMA_OK
    valueLanguage: DEPENDENCY_LANGUAGE_BINARY_NEGATIVE_DEPENDENCY
    supportsSubstvars: true

  - canonicalName: "Build-Profiles"
    onlyInParagraphType: "Package"
    description: |
      <p><b>Advanced field</b>.  <em>This field is covers an advanced topic.  If you are new to packaging, you are
         advised to leave it at its default until you have a working basic package or lots of time to understand
         this topic.</em></p>

      <p>Declare that the package will only built when the given build-profiles are satisfied.</p>

      <p>This field is primarily used in combination with build profiles inside the build dependency related fields
         to reduce the number of build dependencies required during bootstrapping of a new architecture.</p>

      <em>Example:</em>
      <pre>
      Package: foo
      ...

      Package: foo-udeb
      Package-Type: udeb
      # Skip building foo-udeb when the build profile "noudeb" is set (e.g., via dpkg-buildpackage -Pnoudeb)
      Build-Profiles: <!noudeb>
      </pre>

      Note that there is an official list of "common" build profiles with predefined purposes along with rules for how and when the can be used.
    valueType: BUILD_PROFILES_FIELD
    supportsSubstvars: false

  - canonicalName: Uploaders
    onlyInParagraphType: "Source"
    description: |
      <p>Comma separated list of uploaders associated with the package.</p>
      <em>Example</em>:
      <pre>Uploaders:
         John Doe &lt;john@doe.org&gt;,
         Lisbeth Worker &lt;lis@worker.org&gt;,
      </pre>
      <p>Note: If a person is listed in the Maintainer field, they should <em>not</em> be listed in Uploader field.</p>
    valueType: COMMA_SEPARATED_VALUE_LIST
    supportsSubstvars: false

  - canonicalName: Section
    description: |
      <p>Define the section of the Package</p>

      <em>Example</em>:
      <pre>Section: devel</pre>

      <p>see <a>https://packages.debian.org/unstable</a> for more details about the sections.</p>
    valueType: SINGLE_KEYWORD
    keywordListFromDataSet: "virtual/archive-sections-with-components"
    supportsSubstvars: false

  - canonicalName: Testsuite
    onlyInParagraphType: "Source"
    description: |
      <p>Declares a "dep8" runtime test suite if any.</p>

      <p>If you declare a test in <em>debian/tests/control</em>, then <b>dpkg</b> will automatically include that for you without this field being set.</p>
    valueType: SPACE_SEPARATED_VALUE_LIST
    supportsSubstvars: false

  - canonicalName: Homepage
    description: |
      <p>Link to the upstream homepage for this source package.</p>

      <em>Example</em>:
      <pre>Homepage: https://www.janes-tools.org/frob-cleaner</pre>
    valueType: FREE_TEXT_VALUE
    supportsSubstvars: false

  - canonicalName: Multi-Arch
    onlyInParagraphType: "Package"
    description: |
      <p><b>Advanced field</b>.  <em>This field is covers an advanced topic.  If you are new to packaging, you are
         advised to leave it at its default until you have a working basic package or lots of time to understand
         this topic.</em></p>

      <p>Declare the Multi-Arch interface of the package.</p>
      <p>The Multi-Arch field is used to inform the installation system (APT and dpkg) about how it should handle
      dependency relations involving this package and foreign architecture.</p>
      <em>Example</em>:
      <pre>Multi-Arch: foreign
      </pre>
      <p>The rules for Multi-Arch can be quite complicated, but in many cases the following simple rules of thumb
      gets you a long way:
      <ul>
        <li>If the <a href="https://wiki.debian.org/MultiArch/Hints">Multi-Arch hinter</a> comes with a hint, then
            it almost certainly correct.  You are recommended to check the hint for further details (some changes
            can be complicated to do).  Note that the Multi-Arch hinter is only run for official Debian packages
            and may not be applicable to your case.
        </li>
        <li>If you have an "Architecture: all" data-only package, then it often want to be "Multi-Arch: foreign".</li>
        <li>If you have an architecture dependent package, where everything is installed in
            <em>/usr/lib/&lt;DEB_HOST_MULTIARCH&gt;</em> (plus a bit of standard documentation in
            <em>/usr/share/doc</em>), then you probably want "Multi-Arch: same".</li>
        <li>If none of the above applies, then leave it at its default value unless you know what you are doing or
            you are receiving advice from a Multi-Arch expert.</li>
      </ul>
      </p>
      <p>There are 4 possible values for the Multi-Arch field, though not all values are applicable to all packages:
      <ul>
        <li><b>no</b> - The default. The package can be installed for at most one architecture at the time.  It can
          <i>only</i> satisfy relations for the same architecture as itself. Note that "Architecture: all" packages
          are considered as a part of the system's "primary" architecture (see output of
          <pre>dpkg --print-architecture</pre>).
          Note: Despite the "no", the package <em>can</em> be installed for a foreign architecture (e.g. you can
          install a 32-bit version of a package on a 64-bit system).  However, packages depending on it must also
          be installed for the foreign architecture.
        </li>
        <li><b>foreign</b> - The package can be installed for at most one architecture at the time.  However, it can
            satisfy relations for packages regardless of their architecture.  This is often useful for packages
            solely providing data or binaries that have "Multi-Arch neutral interfaces". Sadly, describing
            a "Multi-Arch neutral interface" is hard and often only done by Multi-Arch experts on a case-by-case
            basis.  Some programs are have "Multi-Arch dependent interfaces" and are not safe to declare as
            "Multi-Arch: foreign".
            The name "foreign" refers to the fact that the package can satisfy relations for native <em>and foreign</em>
            architectures at the same time.
        </li>
        <li><b>same</b> - The same version of the package can be co-installed for multiple architecture. However,
            for this to work, the package <b>MUST</b> ship all files in architecture unique paths (usually
            beneath <em>/usr/lib/&lt;DEB_HOST_MULTIARCH&gt;</em>) <em>OR</em> have bit-for-bit identical content
            in files that are in non-architecture unique paths (e.g. <em>/usr/share/doc</em>).
            The name "same" refers to the fact that the package can satisfy relations only for the "same"
            architecture as itself.  However, in this case, it is co-installable with itself as noted above.
            Note: This value <b>cannot</b> be used with "Architecture: all".
        </li>
        <li><b>allowed</b> - <em>Advanced value</em>.  The package is <b>NOT</b> co-installable with itself but
            can satisfy Multi-Arch foreign and Multi-Arch same relations at the same.  This is useful for
            implementations of scripting languages (e.g. Perl or Python).  Here the interpreter contextually need
            to satisfy some relations as "Multi-Arch: foreign" and others as "Multi-Arch: same" (or "Multi-Arch: no").
            Typically, native extensions or plugins will need a "Multi-Arch: same"-relation as they only work with
            the interpreter compiled for the same machine architecture as themselves whereas scripts are usually less
            picky and can rely on the "Multi-Arch: foreign" relation.  Packages wanting to rely on the
            "Multi-Arch: foreign" interface must explicitly declare this adding a ":any" suffix to the package name
            in the dependency relation (e.g. "Depends: python3:any").  However, the ":any" suffix cannot be used
            unconditionally and should not be used unless you know you need it.
        </li>
      </ul>
      </p>
    valueType: SINGLE_KEYWORD
    defaultValue: "no"
    supportsSubstvars: false
    keywordList:

      - value: "no"
        description: |
          <p>The default. The package can be installed for at most one architecture at the time.  It can
          <i>only</i> satisfy relations for the same architecture as itself. Note that "Architecture: all" packages
          are considered as a part of the system's "primary" architecture (see output of
          <pre>dpkg --print-architecture</pre>).</p>

          <p>Note: Despite the "no", the package <em>can</em> be installed for a foreign architecture (e.g. you can
          install a 32-bit version of a package on a 64-bit system).  However, packages depending on it must also
          be installed for the foreign architecture.</p>

      - value: "foreign"
        description: |
          <p>The package can be installed for at most one architecture at the time.  However, it can
          satisfy relations for packages regardless of their architecture.  This is often useful for packages
          solely providing data or binaries that have "Multi-Arch neutral interfaces".</p>

          <p>Sadly, describing a "Multi-Arch neutral interface" is hard and often only done by Multi-Arch experts
          on a case-by-case basis.  Some programs and scripts have "Multi-Arch dependent interfaces" and are not
          safe to declare as "Multi-Arch: foreign".</p>

          <p>The name "foreign" refers to the fact that the package can satisfy relations for native <em>and foreign</em>
          architectures at the same time.</p>

      - value: "same"
        description: |
          <p>The same version of the package can be co-installed for multiple architecture. However,
          for this to work, the package <b>MUST</b> ship all files in architecture unique paths (usually
          beneath <em>/usr/lib/&lt;DEB_HOST_MULTIARCH&gt;</em>) <em>OR</em> have bit-for-bit identical content
          in files that are in non-architecture unique paths (e.g. <em>/usr/share/doc</em>).</p>

          <p>The name "same" refers to the fact that the package can satisfy relations only for the "same"
          architecture as itself.  However, in this case, it is co-installable with itself as noted above.
          Note: This value <b>cannot</b> be used with "Architecture: all".</p>

      - value: "allowed"
        description: |
          <p><em>Advanced value</em>.  The package is <b>NOT</b> co-installable with itself but
          can satisfy Multi-Arch foreign and Multi-Arch same relations at the same.  This is useful for
          implementations of scripting languages (e.g. Perl or Python).  Here the interpreter contextually need
          to satisfy some relations as "Multi-Arch: foreign" and others as "Multi-Arch: same" (or "Multi-Arch: no").</p>

          <p>Typically, native extensions or plugins will need a "Multi-Arch: same"-relation as they only work with
          the interpreter compiled for the same machine architecture as themselves whereas scripts are usually less
          picky and can rely on the "Multi-Arch: foreign" relation.  Packages wanting to rely on the
          "Multi-Arch: foreign" interface must explicitly declare this adding a ":any" suffix to the package name
          in the dependency relation (e.g. "Depends: python3:any").  However, the ":any" suffix cannot be used
          unconditionally and should not be used unless you know you need it.</p>

  - canonicalName: Priority
    valueType: SINGLE_KEYWORD
    description: |
      <p>The priority field describes how important the package is for the functionality of the system.</p>

      <p>Unless you know you need a different value, you should choose <b>optional</b> for your packages.</p>
    defaultValue: "optional"
    supportsSubstvars: false
    keywordList:
      - value: "required"
        description: |
          <p>The package is necessary for the proper functioning of the system (read: dpkg needs it).</p>

          <p>No two packages that both have a priority of <em>standard</em> or higher may conflict with each
          other.</p>

          <p>Applicable if dpkg <em>needs</em> this package to function and it is not a library.</p>
      - value: "important"
        description: |
          <p>The <em>important<em> packages are a bare minimum of commonly-expected and necessary tools.</p>

          <p>Applicable if 99% of all users in the distribution needs this package and it is not a library.</p>

          <p>No two packages that both have a priority of <em>standard</em> or higher may conflict with each
          other.</p>

          <p>Applicable if dpkg <em>needs</em> this package to function and it is not a library.</p>
      - value: "standard"
        description: |
          <p>These packages provide a reasonable small but not too limited character-mode system.  This is
          what will be installed by default (by the debian-installer) if the user does not select anything
          else.  This does not include many large applications.</p>

          <p>Applicable if your distribution installer will install this package by default on a new system
          and it is not a library.</p>

          <p>No two packages that both have a priority of <em>standard</em> or higher may conflict with each
          other.</p>
      - value: "optional"
        description: |
          <p>This is the default priority for the majority of all packages in the Debian archive.</p>
      - value: "extra"
        description: |
          <p>Obsolete alias of <em>optional</em>.</p>

  - canonicalName: Rules-Requires-Root
    onlyInParagraphType: "Source"
    valueType: SPACE_SEPARATED_VALUE_LIST
    defaultValue: "binary-targets"
    description: |
      <p>Declare if and when the package build assumes it is run as root or fakeroot.  Most packages do not need to run as root or fakeroot and the legacy behaviour comes with a performance cost.</p>
      <br>
      <em>Example:</em>
      <pre>Rules-Requires-Root: no</pre>
      <br>
      <p>Setting this field to "no" <em>can</em> cause the package to stop building if it requires root.  Depending on the situation, it might require some trivial or some complicated changes to fix that.  If it breaks and you cannot figure out how to fix it, then reset the field to "binary-targets" and move on until you have time to fix it.</p>

      <p>Note it is not possible to require running the package as "true root".</p>
    keywordList:
      - value: "no"
        isExclusive: true
        description: |
          <p>The build process will not require root or fakeroot during any step.  This enables dpkg-buildpackage and
          debhelper to perform several optimizations during the build.</p>
      - value: "binary-targets"
        isExclusive: true
        description: |
          <p>The build process assumes that dpkg-buildpackage will run the relevant binary target with root or fakeroot.</p>
      - ...
    unknownKeywordValidation: /^[a-z0-9][a-z0-0.+-]+/\S+$/
    supportsSubstvars: false

  - canonicalName: Architecture
    onlyInParagraphType: "Package"
    description: |
      <p>Determines which architectures this package can be compiled for or if it is an architecture-independent
         package.  The value is a space-separated list of dpkg architecture names or wildcards.
      </p>
      <em>Example:</em>
      <pre>
      Package: architecture-specific-package
      Architecture: any
      # ...

      Package: data-only-package
      Architecture: all
      Multi-Arch: foreign
      # ...

      Package: linux-only-package
      Architecture: linux-any
      # ...
      </pre>
      <p>When in doubt, stick to the values <b>all</b> (for scripts, data or documentation, etc.) or <b>any</b>
         (for anything that can be compiled).  For official Debian packages, it is often easier to attempt the
         compilation for unsupported architectures than to maintain the list of machine architectures that work.
      </p>
    valueType: SPACE_SEPARATED_VALUE_LIST
    keywordList:
      - value: "all"
        description: |
          <p>The package is an architecture independent package.  This is typically fitting for packages containing only scripts, data or documentation.</p>

          <p>This name <b>all</b> refers to the fact that the package can be used for <em>all</em> architectures at the same.  Though note that it is still subject to the rules of the <b>Multi-Arch</b> field.</p>
        isExclusive: true
      - value: "any"
        description: |
          <p>The package is an architecture dependent package and need to be compiled for each and every architecture it.</p>

          <p>The name <b>any</b> refers to the fact that this is an architecture <em>wildcard</em> matching <em>any machine architecture</em> supported by dpkg.</p>
      # Permit unknown values; we do not have a full list of architectures handy
      - ...
    supportsSubstvars: false

  - canonicalName: X-DH-Build-For-Type
    onlyInParagraphType: "Package"
    description: |
      <p><b>Special-purpose only</b>.  <em>This field is a special purpose field and is rarely needed. You are recommended to omit unless you know you need it.</em></p>
      <p>This field is used when building a cross-compiling C-compiler (or similar cases), some packages need
        to be build for target (DEB_<b>TARGET</b>_ARCH) rather than the host (DEB_<b>HOST</b>_ARCH) architecture.
      </p>
      <br>
      <em>Example</em>:
      <pre>
      Package: gcc
      Architecture: any
      # ...

      Package: libgcc-s1
      Architecture: any
      # When building a cross-compiling gcc, then this library needs to be built for the target architecture
      # as binaries compiled by gcc will link with this library.
      X-DH-Build-For-Type: target
      # ...
      </pre>
      <p>If you are in doubt, then you probably do <b>not</b> need this field.</p>
    defaultValue: "host"
    valueType: SINGLE_KEYWORD
    keywordList:
      - value: "host"
        description: |
          <p>The package should be compiled for <b>DEB_HOST_ARCH</b> (the default).</p>
      - value: "target"
        description: |
          <p>The package should be compiled for <b>DEB_HOST_TARGET</b>.</p>
    supportsSubstvars: false

  - canonicalName: Description
    description: |
      <p>A human-readable description of the package.  This field consists of two related but distinct parts.</p>

      <p>The first line immediately after the field is called the <em>Synopsis</em> and is a short "noun-phrase" intended to provide a one-line summary of the package.</p>
      <p>The lines after the <em>Synopsis</em> is known as the <em>Extended Description</em> and is intended as a longer summary of the package.</p>

      <em>Example:</em>
      <pre>Description: documentation generator for Python projects
        Sphinx is a tool for producing documentation for Python projects, using
        reStructuredText as markup language.
        .
        Sphinx features:
         * HTML, CHM, LaTeX output,
         * Cross-referencing source code,
         * Automatic indices,
         * Code highlighting, using Pygments,
         * Extensibility. Existing extensions:
           - automatic testing of code snippets,
           - including docstrings from Python modules.
        .
        Build-depend on sphinx if your package uses /usr/bin/sphinx-*
        executables. Build-depend on python3-sphinx if your package uses
        the Python API (for instance by calling python3 -m sphinx).
      </pre>

      <p>The <em>Synopsis</em> is usually displayed in cases where there is limited space such as when reviewing the search results from "apt search foo".  It is often a good idea to imagine that the <em>Synopsis</em> part is inserted into a sentence like "The package provides &ltSynopsis-goes-here&gt;"</p>.
      <p>The <em>Extended Description</em> is a standalone description that should describe what the package does and how it relates to the rest of the system (in terms of, for example, which subsystem it is which part of).</p>
      <p>Please see <a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html#description">https://www.debian.org/doc/debian-policy/ch-controlfields.html#description</a> for more details about the description field and suggestions for how to write it.</a>
    valueType: FREE_TEXT_VALUE
    foldedByDefault: true
    spellcheckValue: true
    supportsSubstvars: true

substvars:
  - name: "${Arch}"
    description: |
      <p>The current host architecture (i.e. the architecture the package is being built for).  Defaults to
      <b>DEB_HOST_ARCH</b> (but can differ with <b>X-DH-Build-For-Type</b>).</p>

  - name: "${source:Version}"
    description: |
      <p>The version of the source package.</p>

  - name: "${source:Upstream-Version}"
    description: |
      <p>The version of the source package that denotes the upstream part of the version though including the Debian epoch if any.</p>

  - name: "${binary:Version}"
    description: |
      <p>The version of the binary package.  This is <em>usually</em> the same as ${source:Version} with the exception of the following two cases: binNMUs and custom versions passed to <b>dpkg-gencontrol</b>.</p>

  - name: "${Newline}"
    value: "\n"
    description: |
      <p>Expands to a single newline character.</p>

  - name: "${Space}"
    value: " "
    description: |
      <p>Expands to a single space character.</p>

  - name: "${Tab}"
    value: "\t"
    description: |
      <p>Expands to a single tab character.</p>

  - name: "${}"
    value: "$"
    description: |
      <p>Not a true substitution value but will be replaced by a literal $ sign after all substitutions have been made.</p>

  - pattern: "${shlibs:<FIELD_NAME>}"
    fieldNames: ["Pre-Depends", "Depends", "Recommends", "Suggests"]
    description: |
      <p>This variable can be generated at runtime by <b><a href="https://manpages.debian.org/dpkg-dhlibdeps.1">dpkg-shlibdeps</a></b> if it is called (possibly indirectly via <b><a href="https://manpages.debian.org/dh_genshlibdeps.1">dh_genshlibdeps</a></b>).</p>

      <p>By default, only <b>${shlibs:Depends}</b> is generated.  However, other the variants can appear if "-d<Name>" is passed to <b>dpkg-shlibdeps</b>.
      Variable settings with names of this form are generated by <b><a href="https://manpages.debian.org/dpkg-dhlibdeps.1">dpkg-shlibdeps</a></b>.</p>
    docSource: "dpkg-shlibdeps(1)"

#  - pattern: "S:<FIELD_NAME>"
#    fieldFrom: SOURCE_PARAGRAPH

#  - pattern: "F:<FIELD_NAME>"
#    fieldFrom: CURRENT_PARAGRAPH

  - name: "${source:Synopsis}"
    fieldFrom: SOURCE_PARAGRAPH
    fieldName: Description
    description: |
      <p>Expands to the <em>Synopsis</em> part of the <em>Description</em> field from the <em>Source</em> paragraph (if present).</p>

      <p>This can be useful for having a standard synopsis that can be reused in all binary packages (followed by a unique bit).</p>

      <em>Example:</em>
      <pre>Source: foo
      ...
      Description: my common synopsis
        Some extended description related to foo.
        .
        This can span multiple lines:
          * and include
          * a list
          * if needed.

      Package: libfoo1
      ...
      Description: ${source:Synopsis} - library
       ${source:Extended-Description}
       .
       This package contains the runtime libraries for foo.

      Package: libfoo-dev
      ...
      Description: ${source:Synopsis} - devel
       ${source:Extended-Description}
       .
       This package contains the headers for compiling against libfoo.
      </pre>

  - name: "${source:Extended-Description}"
    fieldFrom: SOURCE_PARAGRAPH
    fieldName: Description
    description: |
      <p>Expands to the <em>Extended-Description</em> part of the <em>Description</em> field from the <em>Source</em> paragraph (if present).</p>

      <p>This can be useful for having a standard extended description that can be reused in all binary packages (followed by a unique bit).</p>

      <p>Please see the documentation for <b>${source:Synopsis}</b> for an example of how to use this substvar.</p>

  - pattern: "${misc:<FIELD_NAME>}"
    fieldNames: ["Pre-Depends", "Depends"]
    description: |
      <p>Additional dependencies injected by debhelper based tools when they conclude they are necessary.</p>
    docSource: "debhelper(7)"

  - name: "${perl:Depends}"
    description: |
      <p>Additional Perl related dependencies injected by dh_perl when it concludes they are necessary.</p>
    providingTool: "dh_perl(1)"
